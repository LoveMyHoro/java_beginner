1. `<parent>`标签相关：
   - `<parent>`标签用于指定项目的父项目，其目的在于继承父项目的配置以及进行依赖管理。通过这种方式，
   项目可以充分利用父项目已有的配置和依赖定义，减少重复配置的工作量，提高开发效率。
   在给定的示例中，
   `<groupId>org.springframework.boot</groupId>`、
   `<artifactId>spring-boot-starter-parent</artifactId>`
   `<version>3.3.5</version>`
   共同确定了要继承的 Spring Boot 启动器父项目及其具体版本。

2.yaml 文件相关：
   (1)yaml 文件的多层结构主要作用在于避免键名重复，通过合理的层级划分，可以更加清晰地组织和管理配置信息，
   提高配置文件的可读性和可维护性。
   (2)可以利用`@Value("${键名}")`注解来获取配置文件中指定键对应的值。这种方式在需要获取单个配置项时非常方便，
   可以直接将配置值注入到需要的地方。
   (3)当使用`@ConfigurationProperties(prefix = "前缀")`注解后，便无需再借助`@Value`注解。
   此时，IoC（控制反转）容器会自动对与给定“前缀”下一层配置名相同的变量进行配置。
   这种方式适用于批量配置属性的场景，能够更加高效地将一组相关的配置属性注入到对应的 Java 对象中。

3.@SpringBootApplication注解
    (1)@SpringBootApplication是整合了多个注解，其中包括ComponentScan注解。ComponentScan注解默认只会扫描
    启动类所在的包及其子包下的controller,service等类。如果想要扫描其他位置，就要添加ComponentScan注解


4. 注入第三方类：
    (1)运用@Bean 注解实现注入。具体操作是在配置类中构建构造方法，让其返回导入的 jar 包中的对象，
        并且在相应方法上添加@Bean 注解。此时，能够借助启动类获取到的上下文容器，通过调用相关方法来获取这个第三方类。
        详细内容可查看相关文件。
    (2)倘若配置类不在启动类的扫描范围内，可以重新构建一个配置类并实现 ImportSelector 接口。
        将负责返回第三方类的配置类的完整路径放置在这个新的配置类中，最后在启动类上添加@Import(xxxConfig.Class)，
        这样就能够扫描到该配置类。在这个新配置类中，可以将地址单独存放到一个文件里，再利用 IO 流进行读取。
    (3)也可以在 YAML 配置类中配置数据，以供外部导入的第三方 bean 使用。
