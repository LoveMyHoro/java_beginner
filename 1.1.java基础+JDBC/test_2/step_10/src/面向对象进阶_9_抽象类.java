public class 面向对象进阶_9_抽象类 {
    //1.抽象方法：
    //将共性的行为（方法）抽取到父类之后，由于每一个子类执行的内容是不一样的，
    //所以，在父类中不能确定具体的方法体。该方法就可以定义为方法体。
    //抽象方法会强制子类重写方法体
    //2.抽象类
    //如果一个类中存在抽象方法，那么该类就必须声明为抽象类
    //3.构造方法
    //（1）抽象方法：public abstract 返回值类型 方法名{}
    //（2）抽象类：  public abstract class 类名{}

    //4.注意事项
    //（1）抽象类不能实例化
    //（2）抽象类中不一定有抽象方法，有抽象方法的一定是抽象类
    //（3）可以有构造方法
    //（4）抽象类的子类：要么重写抽象类中所有的抽象方法，要么是抽象类

    //5.抽象类和抽象方法的意义
    //（1）强制子类必须按照这种格式进行书写
}
