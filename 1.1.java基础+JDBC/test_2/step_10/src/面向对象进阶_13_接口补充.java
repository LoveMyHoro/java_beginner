public class 面向对象进阶_13_接口补充 {
    //jdk8以后接口新增的方法
    //（1）jdk7以前：接口中只能定义抽象的方法
    //（2）jdk8的新特性：接口中可以定义有方法体的方法（默认：静态）
    //（3）jdk9的新特性：接口中可以定义私有方法

    //1.接口中的默认方法（主要是防止后续接口添加了新的方法导致以前使用此接口的类报错）
    //（1）允许在接口中定义默认方法，需要用关键字default修饰。作用：解决接口升级问题
    //（2）接口中默认方法的定义格式：default 返回值类型 方法名(参数列表){}

    //2.接口中默认方法的注意事项
    //（1）默认方法不是抽象方法，不强制重写。但是如果强制重写，重写的时候要去掉default关键字
    //（2）如果方法实现了多个接口，多个接口存在相同名字的默认方法，子类就必须对该方法进行重写（因为可能会不知道调用的是哪个接口的默认方法）

    //3.接口中的静态方法
    //（1）定义格式和一般的静态方法相同
    //（2）只能通过接口名调用


    //4.接口中的私有方法（通常是给默认方法服务的）
    //（1）一般私有方法：eg private void show(){}
    //（2）静态私有方法：eg private static void show(){}

    //5.接口的应用
    //（1）接口代表规则，是行为的抽象。想要让哪个类拥有一个行为，就让这个类实现对应的接口就行
    //（2）当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称为接口多态

    //6.适配器设计模式
    //（1）设计模式：设计模式就是各种套路
    //（2）适配器设计模式：解决接口与接口实现类之间的矛盾问题
    //这个说不清，具体看test_13_2

    //7.配器设计模式使用方法
    //（1）当一个接口中抽象方法过多，但我们只要使用其中一部分的时候，就可以使用适配器模式
    //（2）编写中间类xxxAdapter,对接口中的方法进行空实现。让真正的类继承中间类，并重写需要用的方法。
    //    为了避免其他类创建适配器的对象，中间的适配器类用abstract修饰


}
