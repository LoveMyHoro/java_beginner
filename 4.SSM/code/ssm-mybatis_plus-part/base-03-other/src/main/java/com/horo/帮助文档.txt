一.分页查询：如果在 Mapper 接口的方法中传入IPage对象作为参数，并且分页插件已正确配置并启用，那么在执行该方法时，
框架会自动在生成的 SQL 语句中添加LIMIT以及对应的偏移量。
   1.实现步骤：
        (1)在启动类中利用bean注解向ioc容器中加入mybatis-plus插件集合，并且new一个分页插件放入插件集合中
        (2)在test方法中调用对应的分页方法
   2.注意点：
        可以自定义分页查询语句

二.条件构造器：
    1.简介：在 Java 中，QueryWrapper（查询包装器）主要用于构建复杂的数据库查询条件。可以根据不同的业务需求，
      通过链式调用的方式轻松地组合各种查询条件。例如，可以使用eq（等于）、ne（不等于）、gt（大于）、lt（小于）
      等方法来指定精确的查询条件。
    2.实例代码
        QueryWrapper<User> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("name", "John"); // 添加等于条件
        queryWrapper.ne("age", 30); // 添加不等于条件
        queryWrapper.like("email", "@gmail.com"); // 添加模糊匹配条件
        以上语句等同于：
        delete from user where name = "John" and age != 30
                                          and email like "%@gmail.com%"
        // 根据 entity 条件，删除记录
        int delete(@Param(Constants.WRAPPER) Wrapper<T> wrapper);
    3.查询，删除，修改：使用QueryWrapper
        LambdaQueryWrapper的使用方法基本和LambdaQueryWrapper使用方法基本相同，就是参数的传递方式换成了方法引用
        如在QueryWrapper中是queryWrapper.like("name","a"),而在LambdaQueryWrapper是LambdaQueryWrapper.like(User::getName,"a")

        常用的就是LambdaQueryWrapper
    4.具体的实现和规则见WrapperTest

三.补充核心注解(具体怎么用可见文档)

    首先声明：这些注解都可以在application.yaml文件中配置实现。具体怎么实现，见文档

    1.@TableName：
            -   描述：表名注解，标识实体类对应的表
            -   使用位置：实体类
        当数据库的表名和实体类的命名不同时(忽略大小写)，使用@TableName注解指明表名

    2.@TableId
            -   描述：主键注解
            -   使用位置：实体类主键字段
            -   格式：@TableId(value="主键列名",type=主键策略)
        (1)在向数据库插入数据时，id生成默认使用雪花算法生成long类型的数字串作为id。如果实体类中的字段与数据库表的主键字段不一致，
        或者需要使用除了默认主键生成策略以外的策略，就可以使用此注解。
        (2)比如想要让主键策略是自增长类型，就可以设置type=true

    3.@TableField
            -   描述：字段注解（非主键）
            -   格式：@TableField(value="非主键名",exist="")
        (1)作用类似于@TableId，但这里是非主键
        (2)exist可以控制查询时是否查询这个列

    4.@TableLogic
            -   描述：逻辑删除
            -   使用位置：
                     @Data
                     public class User {

                        // @TableId
                         private Integer id;
                         private String name;
                         private Integer age;
                         private String email;
                          @TableLogic
                         //逻辑删除字段 int mybatis-plus下,默认 逻辑删除值为1 未逻辑删除 0
                         private Integer deleted;
                     }
            (1)在使用逻辑删除之前，要在数据库要操作的表上利用sql语句加上一列deleted，表示删没删除。默认0表示没删除，1表示以删除
               在我们进行crud方法时，deleted会随之改变
            (2)当我们进行数据查询时，只能查询到那些deleted值为0的。因为每次查询sql后面都加上了deleted=0的字段

四.乐观锁实现

    1.乐观锁和悲观锁是在并发编程中用于处理并发访问和资源竞争的两种不同的锁机制!!

    2.具体思想

        (1)悲观锁：
            悲观锁的基本思想是，在整个数据访问过程中，将共享资源锁定，以确保其他线程或进程不能同时访问和修改该资源。
            悲观锁的核心思想是"先保护，再修改"。在悲观锁的应用中，线程在访问共享资源之前会获取到锁，并在整个操作过程中保持锁的状态，
            阻塞其他线程的访问。只有当前线程完成操作后，才会释放锁，让其他线程继续操作资源。
            这种锁机制可以确保资源独占性和数据的一致性，但是在高并发环境下，悲观锁的效率相对较低。

        (2)乐观锁：
            乐观锁的基本思想是，认为并发冲突的概率较低，因此不需要提前加锁，而是在数据更新阶段进行冲突检测和处理。
            乐观锁的核心思想是"先修改，后校验"。在乐观锁的应用中，线程在读取共享资源时不会加锁，而是记录特定的版本信息。
            当线程准备更新资源时，会先检查该资源的版本信息是否与之前读取的版本信息一致，如果一致则执行更新操作，
            否则说明有其他线程修改了该资源，需要进行相应的冲突处理。乐观锁通过避免加锁操作，提高了系统的并发性能和吞吐量，
            但是在并发冲突较为频繁的情况下，乐观锁会导致较多的冲突处理和重试操作。

    理解点: 悲观锁和乐观锁是两种解决并发数据问题的思路,不是具体技术!!!

    3.乐观锁实现方案和技术：
        版本号/时间戳：为数据添加一个版本号或时间戳字段，每次更新数据时，比较当前版本号或时间戳与期望值是否一致，
        若一致则更新成功，否则表示数据已被修改，需要进行冲突处理。\

    4.版本号乐观锁技术的实现流程:

        (1)每条数据添加一个版本号字段version
        (2)取出记录时，获取当前 version
        (3)更新时，检查获取版本号是不是数据库当前最新版本号
        (4)如果是[证明没有人修改数据], 执行更新, set 数据更新 , version = version+ 1
        (5)如果 version 不对[证明有人已经修改了]，我们现在的其他记录就是失效数据!就更新失败

    具体的代码实现见文档

五.防全表更新和删除
    1.针对 update 和 delete 语句 作用: 阻止恶意的全表更新删除
    2.具体实现见文档





